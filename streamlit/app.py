# ITMO-ML-Services/streamlit/app.py
from loguru import logger

import streamlit as st
from utils.auth import check_login, logout

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

st.set_page_config(
    page_title="ML Classification Service",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded",
)

logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
try:
    authenticated = check_login()
    if not authenticated:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞")
        st.switch_page("pages/login.py")
    logger.debug("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
except Exception as e:
    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    st.switch_page("pages/login.py")

# Display sidebar with navigation
st.sidebar.title("ML Classification")

# Get user info
user_info = st.session_state.get("user_info", {})
logger.debug(
    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–µ—Å—Å–∏–∏: {user_info.get('email', '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')}"
)
if user_info:
    st.sidebar.write(
        f"Welcome, {user_info.get('full_name', user_info.get('email', 'User'))}"
    )

# Navigation
pages = {
    "Text Classification": "pages/classify.py",
    "Batch Processing": "pages/batch.py",
    "History": "pages/history.py",
    "Balance": "pages/balance.py",
}

for page_name, page_path in pages.items():
    st.sidebar.page_link(page_path, label=page_name)

if st.sidebar.button("Logout"):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞")
    logout()
    logger.debug("–í—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞")
    st.switch_page("pages/login.py")

# Main content
st.title("ML Classification Service")
st.write("Welcome to the ML Classification Service interface!")
st.write(
    "Use the sidebar to navigate to different features or get started with text classification below."
)

# Quick classification form
st.header("Quick Classification")
with st.form("quick_classify"):
    text = st.text_area("Enter text to classify:", height=150)
    submit = st.form_submit_button("Classify")

if submit:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É –±—ã—Å—Ç—Ä–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    if not text:
        logger.warning("–¢–µ–∫—Å—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –±—ã–ª –≤–≤–µ–¥—ë–Ω")
        st.warning("Please enter text to classify")
    else:
        logger.debug("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        with st.spinner("Classifying..."):
            from utils.api import classify_text

            result = classify_text(text)

            if result:
                logger.success("–ë—ã—Å—Ç—Ä–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                st.success("Classification complete!")

                # Display result in a better format
                col1, col2 = st.columns(2)

                with col1:
                    if "prediction" in result:
                        st.metric("Sentiment", result["prediction"])

                    if "confidence" in result:
                        st.metric("Confidence", f"{result['confidence']:.2%}")

                with col2:
                    if "execution_time_ms" in result:
                        st.metric(
                            "Processing Time", f"{result['execution_time_ms']} ms"
                        )

                    if "categories" in result and result["categories"]:
                        st.write("**Categories:**")
                        for category in result["categories"]:
                            st.write(f"- {category.capitalize()}")

                # Show raw JSON for advanced users
                with st.expander("View raw JSON result"):
                    st.json(result)
            else:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                st.error(
                    "Classification failed. Please try again or check your balance."
                )
