# ITMO-ML-Services/streamlit/pages/classify.py
import streamlit as st
from loguru import logger

from utils.auth import check_login
from utils.api import classify_text, get_available_models

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Ö–æ–¥–∞
logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
check_login()
logger.debug("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

st.set_page_config(page_title="Text Classification", page_icon="üìù", layout="wide")

logger.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
st.title("Text Classification")
st.write("Submit text to classify using our machine learning models.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
models = get_available_models()
model_options = {}

if models and "items" in models:
    model_options = {
        f"{model['name']} - {model['model_type']}": model["id"]
        for model in models["items"]
    }
    model_options["Default Model"] = None
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {list(model_options.keys())}")
else:
    model_options["Default Model"] = None
    logger.warning("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")

# –§–æ—Ä–º–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
with st.form("classification_form"):
    text = st.text_area("Enter text to classify:", height=200)

    col1, col2 = st.columns(2)
    with col1:
        model_name = st.selectbox("Select model:", list(model_options.keys()))
    with col2:
        async_execution = st.checkbox(
            "Asynchronous execution", help="Process in the background for longer texts"
        )

    submit = st.form_submit_button("Submit for Classification")

if submit:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    if not text:
        logger.warning("–¢–µ–∫—Å—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –±—ã–ª –≤–≤–µ–¥—ë–Ω.")
    else:
        model_id = model_options[model_name]
        logger.debug(
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ú–æ–¥–µ–ª—å: {model_name}, Async: {async_execution}"
        )

        with st.spinner("Processing..."):
            result = classify_text(text, model_id, async_execution)

            if result:
                logger.success("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
                st.success("Classification complete!")

                if async_execution and "task_id" in result:
                    task_id = result["task_id"]
                    logger.info(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. Task ID: {task_id}")
                    st.info(f"Task submitted successfully! Task ID: {task_id}")
                    st.info("You can check the result in the History tab.")
                else:
                    st.subheader("Results:")
                    logger.debug("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...")

                    col1, col2 = st.columns(2)

                    with col1:
                        if "prediction" in result:
                            st.metric("Sentiment", result["prediction"])
                            logger.debug(f"Prediction: {result['prediction']}")

                        if "confidence" in result:
                            st.metric("Confidence", f"{result['confidence']:.2%}")
                            logger.debug(f"Confidence: {result['confidence']}")

                    with col2:
                        if "execution_time_ms" in result:
                            st.metric(
                                "Processing Time", f"{result['execution_time_ms']} ms"
                            )
                            logger.debug(
                                f"Execution Time: {result['execution_time_ms']} ms"
                            )

                        if "categories" in result and result["categories"]:
                            st.write("**Categories:**")
                            for category in result["categories"]:
                                st.write(f"- {category.capitalize()}")
                            logger.debug(
                                f"Categories: {', '.join(result['categories'])}"
                            )

                    with st.expander("View raw JSON result"):
                        st.json(result)
                        logger.debug("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
            else:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
                st.error(
                    "Classification failed. Please try again or check your balance."
                )
